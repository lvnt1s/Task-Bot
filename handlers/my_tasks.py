from pyrogram import Client, filters
from pyrogram.types import Message,CallbackQuery
from keyboards.inline import keyboards as keyboard
from database.db import DatabaseSession
from states.states import user_data,user_states,States
from models.task import Task

async def handle_my_tasks(client: Client, message: Message) -> None:
    if message.text == 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏':
        session = DatabaseSession()
        user_tasks = Task.get_tasks_by_owner(session,message.from_user.id)
        print(user_tasks)
        await message.reply(text = 'üòã <b>–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏, –¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞–µ–º! </b>' if len(user_tasks) == 0 else '‚úçÔ∏è –°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –∑–∞–¥–∞—á:',
                            reply_markup=await keyboard.show_tasks(user_tasks))
    

async def handle_create_task(client: Client, callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id].update({"message_id": callback.message.id})
    user_states[user_id] = States.task_name
    await callback.message.edit_text(text='<b>üí° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>',reply_markup=await keyboard.cancel_create())

async def handle_task_name(client: Client, message: Message) -> None:
    user_id = message.from_user.id
    if user_states.get(user_id) == States.task_name:
        user_data[user_id].update({"task_name": message.text})
        user_states[user_id] = States.task_description
        await message.delete()
        print(user_data)
        await client.edit_message_text(chat_id=message.chat.id,message_id=user_data[user_id]['message_id'],text="<b>‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.</b>")



async def finish_task(client: Client, callback: CallbackQuery) -> None:
    session = DatabaseSession()
    task_id = callback.data.split('|')[1]
    Task.update_task(session=session,
                     task_id=task_id,
                     is_complited=True)
    task = Task.get_task(session, task_id)
    await callback.message.edit_text(text=f"""<b>üí° –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{task.title}</code>
<b>‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{task.description}</code>
<b>üîò –°—Ç–∞—Ç—É—Å:</b> <code>{'–ó–∞–≤–µ—Ä—à–Ω–µ–Ω–æ' if task.is_complited else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}</code>

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>""",reply_markup=await keyboard.manage_task(task_id,task.is_complited))

async def delete_task(client: Client, callback: CallbackQuery) -> None:
    session = DatabaseSession()
    task_id = callback.data.split('|')[1]
    Task.delete_task(session, task_id)
    user_tasks = Task.get_tasks_by_owner(session,callback.from_user.id)
    await callback.message.edit_text(text = 'üòã <b>–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏, –¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞–µ–º! </b>' if len(user_tasks) == 0 else '‚úçÔ∏è –°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –∑–∞–¥–∞—á:',
                        reply_markup=await keyboard.show_tasks(user_tasks))
    await callback.answer('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',show_alert=True)

async def show_user_task(client: Client, callback: CallbackQuery) -> None:
    session = DatabaseSession()
    task_id = callback.data.split('|')[1]
    task = Task.get_task(session, task_id)
    await callback.message.edit_text(text=f"""<b>üí° –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{task.title}</code>
<b>‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{task.description}</code>
<b>üîò –°—Ç–∞—Ç—É—Å:</b> <code>{'–ó–∞–≤–µ—Ä—à–Ω–µ–Ω–æ' if task.is_complited else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}</code>

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>""",reply_markup=await keyboard.manage_task(task_id,task.is_complited))

    
async def handle_task_description(client: Client, message: Message) -> None:
    user_id = message.from_user.id
    if user_states.get(user_id) == States.task_description:
        session = DatabaseSession()
        Task.create_task(session=session,
            title=user_data[user_id]['task_name'],
            description=message.text,
            owner_id=user_id
        )
        await message.delete()
        user_tasks = Task.get_tasks_by_owner(session,message.from_user.id)
        await client.edit_message_text(chat_id=message.chat.id,message_id=user_data[user_id]['message_id'],text='‚úçÔ∏è –°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –∑–∞–¥–∞—á:',reply_markup=await keyboard.show_tasks(user_tasks))
        user_states[user_id] = None

async def handle_cancel_create(client: Client, callback: CallbackQuery) -> None:
    session = DatabaseSession()
    user_states[callback.from_user.id] = None
    user_tasks = Task.get_tasks_by_owner(session,callback.from_user.id)
    await callback.message.edit_text(text = 'üòã <b>–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏, –¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞–µ–º! </b>' if len(user_tasks) == 0 else '‚úçÔ∏è –°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –∑–∞–¥–∞—á:',
                        reply_markup=await keyboard.show_tasks(user_tasks))




